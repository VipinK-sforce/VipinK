public class ExceptionUtil {
	public class MyException extends Exception {}
	 @InvocableMethod(label='Invoke ExceptionUtil')
    public static void throwcustomException(List<String> excmessage){
       
            throw new MyException('An internal exception happened during current operation.'+ 
                                  'Please contact system administrator with this exception details:'+excmessage[0]);
        
    }
    //Log Single Exception
    public static void logException(String objname, String processname, String recordID, String exceptiondetails){
        Exception__c exc = new Exception__c();
        exc.Object__c = objname;
        exc.Operation__c = processname;
        exc.Exception_Details__c = exceptiondetails;
        exc.Record_ID__c = recordID;
        insert exc;
    }
    
    //Log Exceptions
    public static void logException(String objname, String processname, List<Database.SaveResult> listSaveResult){
        System.debug(listSaveResult);
        List<Exception__c> exclist = new List<Exception__c>();
        Exception__c exc;
        for(Database.SaveResult res : listSaveResult){
            if(!res.isSuccess()){
                exc = new Exception__c();
                exc.Object__c = objname;
        		exc.Operation__c = processname;
                String excdetail;
                 for(Database.Error err : res.getErrors()) {
                      excdetail+= err.getStatusCode()+':'+err.getMessage(); 
                     System.debug('Error returned: ' + err.getStatusCode() +' - ' + err.getMessage());
                    }
                String detail = new dmlException().getStackTraceString();
                exc.Exception_Details__c =excdetail+detail ;
                exc.Record_ID__c = res.getId();
                exclist.add(exc);
            }
        }
        if(exclist.size()>0){
            insert exclist;
        }
    }
    //publish event
    public static void publishException(String objname, String processname, String recordID, String exceptiondetails){
        Exception_Log__e pe = new Exception_Log__e();
        pe.Object__c = objname;
        pe.Operation__c = processname;
        pe.Exception_Details__c = exceptiondetails;
        pe.Record_ID__c = recordID;
        eventBus.publish(pe);
    }
    //publish Events
    public static void publishException(String objname, String processname, List<Database.SaveResult> listSaveResult){
       List<Exception_Log__e> pelist = new List<Exception_Log__e>();
        Exception_Log__e pe;
        for(Database.SaveResult res : listSaveResult){
            if(!res.isSuccess()){
                pe = new Exception_Log__e();
                pe.Object__c = objname;
        		pe.Operation__c = processname;
                String excdetail;
                 for(Database.Error err : res.getErrors()) {
                      excdetail+= err.getStatusCode()+':'+err.getMessage(); 
                     System.debug('Error returned: ' + err.getStatusCode() +' - ' + err.getMessage());
                    }
                String detail = new dmlException().getStackTraceString();
                pe.Exception_Details__c = excdetail+detail;
                System.debug(excdetail);
                //pe.Record_ID__c = res.getId();
                pelist.add(pe);
            }
        }
        if(pelist.size()>0){
            eventBus.publish(pelist);
        }
    }
}
Handler Class

public class OpportunityTriggerUtil {
    
    public static void populateOpportunityTeam(List<Opportunity> oppList){
        Set<id> accids = new Set<id>();
   	    Map<id,List<id>> accidtoOppIdsMap = new Map<id,List<id>>();        
		set<ID> teammemberids = new set<ID>();
        List<OpportunityTeamMember> otmToInsert = new List<OpportunityTeamMember>();
        //Get AccountIDS
        Savepoint savep = Database.setSavepoint();
		try{
			
			for(Opportunity opp : oppList){
				if(opp.AccountId != null){
				   //accids.add(opp.accid);
				   if(accidtoOppIdsMap.get(opp.AccountId)!=null){
						accidtoOppIdsMap.get(opp.AccountId).add(opp.id);
					}
					else{
						accidtoOppIdsMap.put(opp.AccountId,new List<id>{opp.id});
					} 
				}
				
			}
			
			System.debug(accidtoOppIdsMap);
			Map<id,id> accidTouserIDmap = new Map<id,id>();
			//Query and retrieve Account teammember
			if(accidtoOppIdsMap.size()>0){
				for(AccountTeamMember atm : [SELECT AccountId,TeamMemberRole,UserId FROM AccountTeamMember
											  WHERE AccountId IN :accidtoOppIdsMap.keySet() AND TeamMemberRole='Sales Manager']){
					accidTouserIDmap.put(atm.AccountId,atm.UserId);                              
				}
				
				//Create Opp Team Member
				
				if(accidTouserIDmap.size()>0){
					Integer reccnt = 0;
					for(ID accid : accidTouserIDmap.keySet()) {
						for(ID oppID :accidtoOppIdsMap.get(accid) ){
                            OpportunityTeamMember otm;
							if(reccnt==1){
								otm = new OpportunityTeamMember( UserId =accidTouserIDmap.get(accid),TeamMemberRole = 'Sales Manager');//,OpportunityId=oppID
							}
							else{
								otm = new OpportunityTeamMember( UserId =accidTouserIDmap.get(accid),OpportunityId=oppID, TeamMemberRole = 'Sales Manager');//
							}
							
							otmToInsert.add(otm);
							reccnt++;
						}
					} 
				 }
				if(otmToInsert.size()>0 &&  Limits.getDMLStatements() < Limits.getLimitDMLStatements()){					
						  
						if(otmToInsert.size()>1){
							//otmToInsert[0].UserId = null;
						    Database.SaveResult[] resultlist = Database.Insert(otmToInsert,false);
							ExceptionUtil.logException('Opportunity','Opp Team Addition',resultlist);
                            ExceptionUtil.publishException('Opportunity','Opp Team Addition',resultlist);
						}
						else{
							insert otmToInsert;
						}
								  
				}
                else{
                    ExceptionUtil.logException('Opportunity','Opp Team Addition',null,'Reached DML governor Limit');	
                    //ExceptionUtil.publishException('Opportunity','Opp Team Addition',oppList[0].id,exdetails);
                }
			}
		}catch(Exception e){
					String exdetails =  e.getCause()+' ; '+e.getLineNumber() + ' ; '+e.getMessage()+' ; '+e.getStackTraceString()
                                                  +' ; '+e.getTypeName() ;
					//ExceptionUtil.logException('Opportunity','Opp Team Addition',oppList[0].id,exdetails);	
                    ExceptionUtil.publishException('Opportunity','Opp Team Addition',oppList[0].id,exdetails);
                    //throw new ExceptionUtil.MyException('Exception happend during Opp Team Addition'+e.getMessage());
                }
        //Create split record
        List<OpportunitySplit> oppsplit = new List<OpportunitySplit>();
        try{
			
            
			//query and get teammember details
			
				List<OpportunityTeamMember> otmsuccessList = [SELECT id,UserID,OpportunityID from OpportunityTeamMember WHERE OpportunityID IN :oppList and TeamMemberRole ='Sales Manager'];
				for(OpportunityTeamMember otmnew : otmsuccessList){
					OpportunitySplit sp = new OpportunitySplit();
					//sp.OpportunityId = otmnew.OpportunityID;
					sp.SplitPercentage = 30;          
					sp.SplitOwnerID = otmnew.UserId;
					oppsplit.add(sp);
				}
			
			
            if(oppsplit.size()>0){
                insert oppsplit;
            }
        }catch(Exception e){   
			//get exception details
            String exdetails = e.getCause()+' ; '+e.getLineNumber() + ' ; '+e.getMessage()+' ; '+e.getStackTraceString()
                 +' ; '+e.getTypeName() ;
            //ExceptionUtil.logException('Opportunity','Opp Split Addition',oppList[0].id,exdetails);
            ExceptionUtil.publishException('OpportunitySplit','Opp Split Addition',oppList[0].id,exdetails);
			//rollback complete transaction
            Database.rollback( savep );
            
        }
        
        
    }

}
